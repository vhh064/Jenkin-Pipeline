pipeline {
    agent any

    stages {
        stage('Build') {
            steps {
                sh 'mvn clean package'
            }
            post {
                success {
                    emailext subject: "Pipeline Status: ${currentBuild.currentResult}",
                             body: "The Build stage was successful.",
                             to: "vhh064@gmail.com",
                             attachmentsPattern: '**/*.log'
                }
                failure {
                    emailext subject: "Pipeline Status: ${currentBuild.currentResult}",
                             body: "The Build stage has failed.",
                             to: "vhh064@gmail.com",
                             attachmentsPattern: '**/*.log'
                }
            }
        }
        stage('Unit and Integration Tests') {
            steps {
                sh 'mvn test'
                // Execute integration tests using Selenium or other appropriate tools
            }
            post {
                success {
                    emailext subject: "Pipeline Status: ${currentBuild.currentResult}",
                             body: "The Unit and Integration Tests stage was successful.",
                             to: "vhh064@gmail.com",
                             attachmentsPattern: '**/*.log'
                }
                failure {
                    emailext subject: "Pipeline Status: ${currentBuild.currentResult}",
                             body: "The Unit and Integration Tests stage has failed.",
                             to: "vhh064@gmail.com",
                             attachmentsPattern: '**/*.log'
                }
            }
        }
        stage('Code Analysis') {
            steps {
                // Configure SonarQube server and project
                sh 'mvn sonar:sonar'
            }
            post {
                success {
                    emailext subject: "Pipeline Status: ${currentBuild.currentResult}",
                             body: "The Code Analysis stage was successful.",
                             to: "vhh064@gmail.com",
                             attachmentsPattern: '**/*.log'
                }
                failure {
                    emailext subject: "Pipeline Status: ${currentBuild.currentResult}",
                             body: "The Code Analysis stage has failed.",
                             to: "vhh064@gmail.com",
                             attachmentsPattern: '**/*.log'
                }
            }
        }
        stage('Security Scan') {
            steps {
                // Run security scan using OWASP ZAP or another security scanning tool
                sh 'zap-baseline.py -t http://localhost:8080/myapp'
            }
            post {
                success {
                    emailext subject: "Pipeline Status: ${currentBuild.currentResult}",
                             body: "The Security Scan stage was successful.",
                             to: "vhh064@gmail.com",
                             attachmentsPattern: '**/*.log'
                }
                failure {
                    emailext subject: "Pipeline Status: ${currentBuild.currentResult}",
                             body: "The Security Scan stage has failed.",
                             to: "vhh064@gmail.com",
                             attachmentsPattern: '**/*.log'
                }
            }
        }
        stage('Deploy to Staging') {
            steps {
                // Use AWS CLI or other deployment methods to deploy to staging server
                sh 'aws ec2 deploy-to-staging'
            }
            post {
                success {
                    emailext subject: "Pipeline Status: ${currentBuild.currentResult}",
                             body: "The Deploy to Staging stage was successful.",
                             to: "vhh064@gmail.com",
                             attachmentsPattern: '**/*.log'
                }
                failure {
                    emailext subject: "Pipeline Status: ${currentBuild.currentResult}",
                             body: "The Deploy to Staging stage has failed.",
                             to: "vhh064@gmail.com",
                             attachmentsPattern: '**/*.log'
                }
            }
        }
        stage('Integration Tests on Staging') {
            steps {
                // Execute integration tests on staging environment using Selenium or other tools
                                sh 'mvn integration-test'
            }
            post {
                success {
                    emailext subject: "Pipeline Status: ${currentBuild.currentResult}",
                             body: "The Integration Tests on Staging stage was successful.",
                             to: "vhh064@gmail.com",
                             attachmentsPattern: '**/*.log'
                }
                failure {
                    emailext subject: "Pipeline Status: ${currentBuild.currentResult}",
                             body: "The Integration Tests on Staging stage has failed.",
                             to: "vhh064@gmail.com",
                             attachmentsPattern: '**/*.log'
                }
            }
        }
        stage('Deploy to Production') {
            steps {
                // Use AWS CLI or other deployment methods to deploy to production server
                sh 'aws ec2 deploy-to-production'
            }
            post {
                success {
                    emailext subject: "Pipeline Status: ${currentBuild.currentResult}",
                             body: "The Deploy to Production stage was successful.",
                             to: "vhh064@gmail.com",
                             attachmentsPattern: '**/*.log'
                }
                failure {
                    emailext subject: "Pipeline Status: ${currentBuild.currentResult}",
                             body: "The Deploy to Production stage has failed.",
                             to: "vhh064@gmail.com",
                             attachmentsPattern: '**/*.log'
                }
            }
        }
    }
}

